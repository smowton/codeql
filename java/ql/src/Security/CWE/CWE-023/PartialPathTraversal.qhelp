<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>User supplied file paths can often pose security risks if a program does not correctly handle them. In particular, if a user 
is meant to access files under a certain directory but does not enters a path under that directory, they can gain access to 
(and potentially modify/delete) unexpected, possibly sensitive resources. </p>

<p>Suppose a program is to only accept paths that point to files/folders within directory <code>DIR</code>. 
To ensure that a user supplied path, say <code>SUBDIR</code>, is a subdirectory of <code>DIR</code>, the 
program verifies, using string comparisons, that <code>DIR</code> is a prefix of <code>SUBDIR</code>.
However, if <code>DIR</code> is not slash-terminated, such a check would not be sufficient. 
<code>SUBDIR</code> may be allowed to also access siblings of <code>DIR</code> and not 
just children of <code>DIR</code>, which is a security vulnerability.</p>

</overview>
<recommendation>

<p>If the user should only access items within a certain directory <code>DIR</code>, first ensure that <code>DIR</code> is slash-terminated,
and then proceed (as normal) to verify that <code>DIR</code> is a prefix of the user-provided path, <code>SUBDIR</code>. Note, Java's <code>getCanonicalPath()</code>
returns a <b>non</b>-slash-terminated path string, so a <code>"/"</code> must be added to <code>DIR</code> if that method is used. </p>

</recommendation>
<example>

<p> 


In this example, the <code>if</code> statement checks if <code>parent.getCanonicalPath()</code> 
is a prefix of <code>dir.getCanonicalPath()</code>. However, <code>parent.getCanonicalPath()</code> is 
not slash-terminated. So, the user that supplies <code>dir</code> may be allowed to access siblings of <code>parent</code> 
and not just children of <code>parent</code>, which is a security issue.

</p>

<sample src="PartialPathTraversalBad.java" />

<p>

In this example, the <code>if</code> statement checks if <code>parent.getCanonicalPath() + File.separator </code> 
is a prefix of <code>dir.getCanonicalPath()</code>. Because <code>parent.getCanonicalPath().toPath()</code> is 
indeed slash-terminated, the user supplying <code>dir</code> can only access children of 
<code>parent</code>, as desired.

</p>

<sample src="PartialPathTraversalGood.java" />

</example>
<references>

<li>
OWASP:
<a href="https://owasp.org/www-community/attacks/Path_Traversal">Partial Path Traversal</a>.
CVE-2022-23457:
<a href="https://github.com/ESAPI/esapi-java-legacy/blob/develop/documentation/GHSL-2022-008_The_OWASP_Enterprise_Security_API.md"> ESAPI Vulnerability Report</a>
</li>

</references>
</qhelp>
