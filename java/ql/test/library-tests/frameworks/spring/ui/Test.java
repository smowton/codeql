package generatedtest;

import java.util.Collection;
import java.util.Map;
import org.springframework.ui.ConcurrentModel;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;

//Test case generated by GenerateFlowTestCase.ql
public class Test {

	Object getMapKey(Object container) { return null; }
	Object getMapValue(Object container) { return null; }
	Object newWithElement(Object element) { return null; }
	Object newWithMapKey(Object element) { return null; }
	Object newWithMapValue(Object element) { return null; }
	Object source() { return null; }
	void sink(Object o) { }

	public void test() {

		{
			// "org.springframework.ui;ConcurrentModel;false;put;;;Argument[0];MapKey of Argument[-1];value"
			ConcurrentModel out = null;
			String in = (String)source();
			out.put(in, null);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ConcurrentModel;false;put;;;Argument[1];MapValue of Argument[-1];value"
			ConcurrentModel out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ConcurrentModel;false;putAll;;;MapKey of Argument[0];MapKey of Argument[-1];value"
			ConcurrentModel out = null;
			Map<? extends String,?> in = (Map<? extends String,?>)newWithMapKey(source());
			out.putAll(in);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ConcurrentModel;false;putAll;;;MapValue of Argument[0];MapValue of Argument[-1];value"
			ConcurrentModel out = null;
			Map<? extends String,?> in = (Map<? extends String,?>)newWithMapValue(source());
			out.putAll(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAllAttributes;(Collection);;Element of Argument[0];MapValue of Argument[-1];value"
			Model out = null;
			Collection<?> in = (Collection<?>)newWithElement(source());
			out.addAllAttributes(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAllAttributes;(Collection);;Element of Argument[0];MapValue of Argument[-1];value"
			ConcurrentModel out = null;
			Collection<?> in = (Collection<?>)newWithElement(source());
			out.addAllAttributes(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAllAttributes;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value"
			Model out = null;
			Map<String,?> in = (Map<String,?>)newWithMapKey(source());
			out.addAllAttributes(in);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAllAttributes;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value"
			ConcurrentModel out = null;
			Map<String,?> in = (Map<String,?>)newWithMapKey(source());
			out.addAllAttributes(in);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAllAttributes;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value"
			Model out = null;
			Map<String,?> in = (Map<String,?>)newWithMapValue(source());
			out.addAllAttributes(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAllAttributes;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value"
			ConcurrentModel out = null;
			Map<String,?> in = (Map<String,?>)newWithMapValue(source());
			out.addAllAttributes(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAttribute;(Object);;Argument[0];MapValue of Argument[-1];value"
			Model out = null;
			Object in = (Object)source();
			out.addAttribute(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAttribute;(Object);;Argument[0];MapValue of Argument[-1];value"
			ConcurrentModel out = null;
			Object in = (Object)source();
			out.addAttribute(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[0];MapKey of Argument[-1];value"
			Model out = null;
			String in = (String)source();
			out.addAttribute(in, null);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[0];MapKey of Argument[-1];value"
			ConcurrentModel out = null;
			String in = (String)source();
			out.addAttribute(in, null);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[1];MapValue of Argument[-1];value"
			Model out = null;
			Object in = (Object)source();
			out.addAttribute(null, in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[1];MapValue of Argument[-1];value"
			ConcurrentModel out = null;
			Object in = (Object)source();
			out.addAttribute(null, in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;asMap;;;MapKey of Argument[-1];MapKey of ReturnValue;value"
			Map<String,Object> out = null;
			Model in = (Model)newWithMapKey(source());
			out = in.asMap();
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;asMap;;;MapKey of Argument[-1];MapKey of ReturnValue;value"
			Map<String,Object> out = null;
			ConcurrentModel in = (ConcurrentModel)newWithMapKey(source());
			out = in.asMap();
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;asMap;;;MapValue of Argument[-1];MapValue of ReturnValue;value"
			Map<String,Object> out = null;
			Model in = (Model)newWithMapValue(source());
			out = in.asMap();
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;asMap;;;MapValue of Argument[-1];MapValue of ReturnValue;value"
			Map<String,Object> out = null;
			ConcurrentModel in = (ConcurrentModel)newWithMapValue(source());
			out = in.asMap();
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;getAttribute;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			Model in = (Model)newWithMapValue(source());
			out = in.getAttribute(null);
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;getAttribute;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			ConcurrentModel in = (ConcurrentModel)newWithMapValue(source());
			out = in.getAttribute(null);
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;mergeAttributes;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value"
			Model out = null;
			Map<String,?> in = (Map<String,?>)newWithMapKey(source());
			out.mergeAttributes(in);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;mergeAttributes;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value"
			ConcurrentModel out = null;
			Map<String,?> in = (Map<String,?>)newWithMapKey(source());
			out.mergeAttributes(in);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;mergeAttributes;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value"
			Model out = null;
			Map<String,?> in = (Map<String,?>)newWithMapValue(source());
			out.mergeAttributes(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;mergeAttributes;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value"
			ConcurrentModel out = null;
			Map<String,?> in = (Map<String,?>)newWithMapValue(source());
			out.mergeAttributes(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;mergeAttributes;;;MapValue of Argument[-1];ReturnValue;value"
			Model out = null;
			Model in = (Model)newWithMapValue(source());
			out = in.mergeAttributes(null);
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.ui;Model;true;mergeAttributes;;;MapValue of Argument[-1];ReturnValue;value"
			ConcurrentModel out = null;
			ConcurrentModel in = (ConcurrentModel)newWithMapValue(source());
			out = in.mergeAttributes(null);
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;ModelMap;(Object);;Argument[0];MapValue of Argument[-1];value"
			ModelMap out = null;
			Object in = (Object)source();
			out = new ModelMap(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;ModelMap;(String,Object);;Argument[0];MapKey of Argument[-1];value"
			ModelMap out = null;
			String in = (String)source();
			out = new ModelMap(in, null);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;ModelMap;(String,Object);;Argument[1];MapValue of Argument[-1];value"
			ModelMap out = null;
			Object in = (Object)source();
			out = new ModelMap(null, in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;addAllAttributes;(Collection);;Element of Argument[0];MapValue of Argument[-1];value"
			ModelMap out = null;
			Collection<?> in = (Collection<?>)newWithElement(source());
			out.addAllAttributes(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;addAttribute;(Object);;Argument[0];MapValue of Argument[-1];value"
			ModelMap out = null;
			Object in = (Object)source();
			out.addAttribute(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;addAttribute;(String,Object);;Argument[0];MapKey of Argument[-1];value"
			ModelMap out = null;
			String in = (String)source();
			out.addAttribute(in, null);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;addAttribute;(String,Object);;Argument[1];MapValue of Argument[-1];value"
			ModelMap out = null;
			Object in = (Object)source();
			out.addAttribute(null, in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;getAttribute;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			ModelMap in = (ModelMap)newWithMapValue(source());
			out = in.getAttribute(null);
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.ui;ModelMap;false;mergeAttributes;;;MapValue of Argument[-1];ReturnValue;value"
			ModelMap out = null;
			ModelMap in = (ModelMap)newWithMapValue(source());
			out = in.mergeAttributes(null);
			sink(out); // $hasValueFlow
		}

	}

}