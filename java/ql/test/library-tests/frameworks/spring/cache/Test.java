package generatedtest;

import org.springframework.cache.Cache;

//Test case generated by GenerateFlowTestCase.ql
public class Test {

	Object getMapKey(Object container) { return null; }
	Object getMapValue(Object container) { return null; }
	Object newWithMapKey(Object element) { return null; }
	Object newWithMapValue(Object element) { return null; }
	Object source() { return null; }
	void sink(Object o) { }

	public void test() {

		{
			// "org.springframework.cache;Cache$ValueRetrievalException;false;getKey;;;MapKey of Argument[-1];ReturnValue;value"
			Object out = null;
			ValueRetrievalException in = (ValueRetrievalException)newWithMapKey(source());
			out = in.getKey();
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache$ValueWrapper;true;get;;;MapValue of Argument[-1];ReturnValue;value"
			Object out = null;
			ValueWrapper in = (ValueWrapper)newWithMapValue(source());
			out = in.get();
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;get;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;value"
			ValueWrapper out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.get(null);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;get;(Object,Callable);;MapValue of Argument[-1];ReturnValue;value"
			org.springframework.cache.T out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.get(null, null);
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;get;(Object,Class);;MapValue of Argument[-1];ReturnValue;value"
			org.springframework.cache.T out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.get(null, null);
			sink(out); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;getNativeCache;;;MapKey of Argument[-1];MapKey of ReturnValue;value"
			Object out = null;
			Cache in = (Cache)newWithMapKey(source());
			out = in.getNativeCache();
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;getNativeCache;;;MapValue of Argument[-1];MapValue of ReturnValue;value"
			Object out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.getNativeCache();
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;put;;;Argument[0];MapKey of Argument[-1];value"
			Cache out = null;
			Object in = (Object)source();
			out.put(in, null);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;put;;;Argument[1];MapValue of Argument[-1];value"
			Cache out = null;
			Object in = (Object)source();
			out.put(null, in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;putIfAbsent;;;Argument[0];MapKey of Argument[-1];value"
			Cache out = null;
			Object in = (Object)source();
			out.putIfAbsent(in, null);
			sink(getMapKey(out)); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;putIfAbsent;;;Argument[1];MapValue of Argument[-1];value"
			Cache out = null;
			Object in = (Object)source();
			out.putIfAbsent(null, in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.cache;Cache;true;putIfAbsent;;;MapValue of Argument[-1];ReturnValue;value"
			ValueWrapper out = null;
			Cache in = (Cache)newWithMapValue(source());
			out = in.putIfAbsent(null, null);
			sink(out); // $hasValueFlow
		}

	}

}