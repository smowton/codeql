package generatedtest;

import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.PagingAndSortingRepository;

//Test case generated by GenerateFlowTestCase.ql
public class Test {

	Object getElement(Object container) { return null; }
	Object getMapValue(Object container) { return null; }
	Object newWithMapValue(Object element) { return null; }
	Object source() { return null; }
	void sink(Object o) { }

	public void test() {

		{
			// "org.springframework.data.repository;CrudRepository;true;findAll;;;MapValue of Argument[-1];Element of ReturnValue;value"
			Page out = null;
			PagingAndSortingRepository in = (PagingAndSortingRepository)newWithMapValue(source());
			out = in.findAll((Pageable)null);
			sink(getElement(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;CrudRepository;true;findAll;;;MapValue of Argument[-1];Element of ReturnValue;value"
			Iterable out = null;
			PagingAndSortingRepository in = (PagingAndSortingRepository)newWithMapValue(source());
			out = in.findAll((Sort)null);
			sink(getElement(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;CrudRepository;true;findAll;;;MapValue of Argument[-1];Element of ReturnValue;value"
			Iterable out = null;
			CrudRepository in = (CrudRepository)newWithMapValue(source());
			out = in.findAll();
			sink(getElement(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;CrudRepository;true;findAllById;;;MapValue of Argument[-1];Element of ReturnValue;value"
			Iterable out = null;
			CrudRepository in = (CrudRepository)newWithMapValue(source());
			out = in.findAllById(null);
			sink(getElement(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;CrudRepository;true;findById;;;MapValue of Argument[-1];Element of ReturnValue;value"
			Optional out = null;
			CrudRepository in = (CrudRepository)newWithMapValue(source());
			out = in.findById(null);
			sink(getElement(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;CrudRepository;true;save;;;Argument[0];MapValue of Argument[-1];value"
			CrudRepository out = null;
			Object in = (Object)source();
			out.save(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;CrudRepository;true;saveAll;;;Argument[0];MapValue of Argument[-1];value"
			CrudRepository out = null;
			Iterable in = (Iterable)source();
			out.saveAll(in);
			sink(getMapValue(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;PagingAndSortingRepository;true;findAll;;;MapValue of Argument[-1];Element of ReturnValue;value"
			Page out = null;
			PagingAndSortingRepository in = (PagingAndSortingRepository)newWithMapValue(source());
			out = in.findAll((Pageable)null);
			sink(getElement(out)); // $hasValueFlow
		}
		{
			// "org.springframework.data.repository;PagingAndSortingRepository;true;findAll;;;MapValue of Argument[-1];Element of ReturnValue;value"
			Iterable out = null;
			PagingAndSortingRepository in = (PagingAndSortingRepository)newWithMapValue(source());
			out = in.findAll((Sort)null);
			sink(getElement(out)); // $hasValueFlow
		}

	}

}